{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"6b6f57","input":"long_string = \"\"\"Twas the night before Christmas,\nwhen all through the house\nNot a creature was stirring,\nnot even a mouse.\"\"\"\nprint(long_string)","output":{"0":{"name":"stdout","output_type":"stream","text":"Twas the night before Christmas,\nwhen all through the house\nNot a creature was stirring,\nnot even a mouse.\n"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"6d0999","input":"greeting_start = \"Season's\"\ngreeting_end = 'greetings'\n\nprint(greeting_start, greeting_end)","output":{"0":{"name":"stdout","output_type":"stream","text":"Season's greetings\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"5b57b8","input":"s = \"Mighty\"\nx = len(s)\nprint(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"6\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"96fd05","input":"# convert from integer to string\nid = 1729\nnew_id = str(id) + \"_NEW\"\nprint(new_id)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"1729_NEW\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"e0dcab","input":"quote = '\"The time has come\", the Walrus said.'\nprint(quote)","output":{"0":{"name":"stdout","output_type":"stream","text":"\"The time has come\", the Walrus said.\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"a6f586","input":"# convert from string to floating-point number\nprice = \"12.99\"\ntotal_price = float(price) * 1.2\nprint(total_price)","output":{"0":{"name":"stdout","output_type":"stream","text":"15.588\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"b57c35","input":"quote = \"\\\"The time has come\\\", the Walrus said.\"\nprint(quote)","output":{"0":{"name":"stdout","output_type":"stream","text":"\"The time has come\", the Walrus said.\n"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"db25c4","input":"greeting = greeting_start + \" \" + greeting_end\nprint(greeting)","output":{"0":{"name":"stdout","output_type":"stream","text":"Season's greetings\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"3c51e2","input":"name = \"Ian Botham\"\nname_uppercase = name.upper()\nprint(name_uppercase)","output":{"0":{"name":"stdout","output_type":"stream","text":"IAN BOTHAM\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"6bdec8","input":"text = \"The time has come\"\nword_list = text.split()\nprint(word_list)","output":{"0":{"name":"stdout","output_type":"stream","text":"['The', 'time', 'has', 'come']\n"}},"pos":12,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"9a8d74","input":"quote = \"A\\\\B\"\nprint(quote)","output":{"0":{"name":"stdout","output_type":"stream","text":"A\\B\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"016422","input":"print(\"A\\nAB\\nABC\")","output":{"0":{"name":"stdout","output_type":"stream","text":"A\nAB\nABC\n"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"1fe46c","input":"text = \"  too much space!   \"\ntext2 = text.strip()\nprint(text2)","output":{"0":{"name":"stdout","output_type":"stream","text":"too much space!\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"4761f0","input":"x = [4, 5, 6, 7, 8, 9]\ny = x[0]\nprint(y)","output":{"0":{"name":"stdout","output_type":"stream","text":"4\n"}},"pos":23,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"ceba01","input":"z = x[0:3]\nprint(z)","output":{"0":{"name":"stdout","output_type":"stream","text":"[4, 5, 6]\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"1e4bda","input":"\", \".join(word_list)","output":{"0":{"data":{"text/plain":"'The, time, has, come'"},"exec_count":3,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"f96ee6","input":"w = x[0:9:2]\nprint(w)","output":{"0":{"name":"stdout","output_type":"stream","text":"[4, 6, 8]\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"031b87","input":"text = \"Surrounded NSCI0007 me occasional pianoforte NSCI0011 alteration unaffected impossible ye. For saw half than cold.  arrived adapted. Numerous ladyship so raillery humoured goodness received an. So NSCI0004 formal length my highly NSCI0005 afford oh. Tall neat he make or at dull ye.\"\n\nn = len(text) # determine the number of characters in the text\nmodule_list = [] # create an empty list\nfor i in range(n): # i loops of all index positions in text\n    if text[i:i + 4] == \"NSCI\": # exctact a 4 character substring and check if it is equal to \"NSCI\"\n        module_list.append(text[i:i + 8]) # add 8 characters to the list\nprint(module_list)\n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"['NSCI0007', 'NSCI0011', 'NSCI0004', 'NSCI0005']\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"33ffef","input":"text = \"Natural Sciences\"\n# first character is at index 0\nfirst_initial = text[0]\n# last character is at index -1\nfinal_character = text[-1]\nprint(first_initial, final_character)","output":{"0":{"name":"stdout","output_type":"stream","text":"N s\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b5fbb4","input":"id = last_name + 55","output":{"0":{"ename":"TypeError","evalue":"must be str, not int","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-f9dab8cd3545>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlast_name\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m55\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: must be str, not int"]}},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"003674","input":"`x[a:b:c]` returns a list containing items `a` to `b - 1` with a step size of `c` (this is very similar to the `range` function),","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"09475f","input":"# Strings\n## String Variables\nA string is data type representing character data. In Python, string literals are surrounded either by double quote `\"` or single quote `'` characters.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"0bedaf","input":"---\n**NOTE**\n\nAn important difference between lists and strings: whereas it is possible to change the value of an an individual list item, it is **not** possible to change an indivdual string character. We say that strings are **immutable**.\n```\nx = [4, 5, 6]\nx[0] = 10 # this is OK\ns = \"ABC\"\ns[0] = \"X\" # this will result in an error\n```\nLikewise, it is not possible to append a character to a string. Instead, use string concatenation.\n```\ns.append(\"D\") # Error\ns = s + \"D\" # This is OK\n```\n---","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"27aeda","input":"Other useful methods are `split`, `join` and `trim`. `split` splits the string into individual words and returns them as a list:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"367fd3","input":"## Strings and Characters\nA string is composed of a sequence of characters, and most of the operations that can be performed on lists can also be performed on strings. For example, individual characters can be accessed using square brackets enclosing the index position.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"40a6a6","input":"`strip` removes any white space characters (spaces, tabs or newlines) at the start or end of the string:","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"5b19e7","input":"This can also be used to include a backslash character in the string.","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"5b8225","input":"But it is not possible to concatentate a string and a number:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"6c2924","input":"## Escape Sequences\n\nIf you want to include special characters in a string, use an **escape sequence**. Precede the character you want to want to escape by a backslash character `\\`.","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"82e6a6","input":"## Example\nNatural Sciences modules are identified by a 8 character code consisting of `NSCI` followed by a four digit number. The following paragraph of text contains Natural Sciences module codes mixed up with other data. We will write Python code to extract a list of Module codes from the text.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"8c72cb","input":"## Multi-line Strings\nString literals can span multiple lines, using triple-quotes: \"\"\"...\"\"\" or '''...'''.","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"8dea8d","input":"If we want to access a sublist, we can use array **slicing**. Given integers `a` and `b`, `x[a:b]` returns a new list which contains the elements of `x` from index `a` to `b - 1` (i.e. including element `a` but excluding element `b`).","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"92b34d","input":"---\n**NOTES**  \n- String comparison is **case-sensitive** so \"S\" == \"s\" is *not* true.\n- Remember to use a double equals to check for equality.\n---","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"b232bd","input":"A very useful excape sequence is `\\n`, which denotes a **newline** character.","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"c5c92c","input":"## Slicing Lists and Strings\n\nGiven a list or string, we can access a single element using square brackets:\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"c802b1","input":"## String Concatenation\nUse the `+` symbol to **concatentate** strings","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"cfc6c8","input":"`join` does the reverse, combining a list of strings into a single string. `s1.join(word_list)` joins the strings in ``","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"d0146b","input":"## Converting between strings and numbers\n\nFunctions `str`, `int` and `float` are available to convert between strings and other data types.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"f72be2","input":"## String Methods\nA string is an **object**, which is a data type with **methods** directly attached with it which can be called similarly to calling a function. The  `upper` method returns a new string in upper case:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"f9a436","input":"Use the `len` function to find the length of a string.","pos":19,"type":"cell"}
{"id":0,"time":1631898328601,"type":"user"}
{"last_load":1631898329669,"type":"file"}