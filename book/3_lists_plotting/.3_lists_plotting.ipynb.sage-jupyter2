{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-043001d3-c06e-4fc4-ad09-5fde5cfcff26.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1631119697891,"exec_count":1,"id":"a79b43","input":"cities = [\"Manchester\", \"Liverpool\", \"Sheffield\", \"Stoke-on-Trent\"]\nx = cities[2]\nprint(x)\n","kernel":"python3","output":{"0":{"name":"stdout","text":"Sheffield\n"}},"pos":7,"start":1631119697872,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"1e9bde","input":"populations = [12, 25, 54, 102, 206]\nprint(populations)","output":{"0":{"name":"stdout","output_type":"stream","text":"[12, 25, 54, 102, 206]\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"77ce48","input":"plt.figure(figsize=(4,4)) # create figure of size 4 by 4 inches\nplt.plot(x, y) # plot a line graph\nplt.xlabel(\"Time (s)\") # add an x-axis label\nplt.ylabel(\"Distance (m)\") # add a y-axis label\nplt.title(\"Particle Position\") # add a figure title","output":{"0":{"data":{"image/png":"39d4f2c44e03e89c6e290c50352e3b724bfc05df","text/plain":"<Figure size 288x288 with 1 Axes>"},"exec_count":12,"metadata":{"image/png":{"height":277,"width":274},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0408e5","input":"initial_pop = populations[0]\nyear_3_pop = populations[3]\n\nprint(\"Initial population:\", initial_pop)\nprint(\"Population in year 3:\", year_3_pop)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Initial population: 12\nPopulation in year 3: 102\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"7e6587","input":"values = [\"ABC\", \"DEF\", \"GHI\", \"JKL\"]\ni = values.index(\"GHI\") # Find the index of the first element equal to \"GHI\"\nprint(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"2\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ff3f07","input":"populations[3] = 100 # Assign the value 100 to element at index 3\nprint(populations)","output":{"0":{"name":"stdout","output_type":"stream","text":"[12, 25, 54, 100, 206]\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"6eb69f","input":"n = len(populations) # get the number of elements in the list\nfor i in range(n): # loop over index values 0 to n - 1\n    pop = populations[i] # Access element at index i\n    print(\"Year\", i, \"population:\", pop)","output":{"0":{"name":"stdout","output_type":"stream","text":"Year 0 population: 12\nYear 1 population: 25\nYear 2 population: 54\nYear 3 population: 100\nYear 4 population: 206\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e4763a","input":"import matplotlib.pyplot as plt","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e7a584","input":"for pop in populations: # loop over all elements of the list\n    print(\"Population:\", pop)","output":{"0":{"name":"stdout","output_type":"stream","text":"Population: 12\nPopulation: 25\nPopulation: 54\nPopulation: 100\nPopulation: 206\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a1089f","input":"populations.append(420)\nprint(populations)","output":{"0":{"name":"stdout","output_type":"stream","text":"[12, 25, 54, 100, 206, 420]\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"ea3cd3","input":"time = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ndis = [2.5, 2.6, 3.4, 4.1, 4.5, 5.1, 5.2]","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"af5669","input":"values = []\nfor i in range(10):\n    values.append(i**2)\nprint(values)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n"}},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"151357","input":"Likewise, we can update individual list elements. Suppose we would like to change the value of the 3rd element:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"20939b","input":"If you don't need index values, you can loop over the individual elements of the list:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"2a25d4","input":"Then:\n- create a figure using the function `plt.figure`, passing in the dimensions in inches.\n- plot a line graph using `plt.plot`, passing in the two lists\n- add axis labels and a title using `plt.xlabel`, `plt.ylabel` and `plt.title`","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"32e96f","input":"Each element in a list has an **index** which identifies its position. We can access a list element by following the variable name with square brackets and the index:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"57bd7a","input":"## Traversing Lists\nThere are two ways of accessing all elements of a list. The first way is to use a `for` loop to loop over all index values. We use the Python function `len` to determine the number of elements in the list.","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"62ff23","input":"## Plotting using Matplotlib\n\nPython does not include any in-built graph plotting capability. In order to plot graphs, we have to **import** a Python **package** called `matplotlib`. A package is a library of code which we can use to extend the capabilities of core Python, and is composed of individual code files called **modules**. Use the `import` statement to import the module `matplotlib.pyplot`:","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"7ae2d2","input":"## Appending Elements to a List\nAfter a list is created, we can add items to it using the `append` method. Suppose that we have recorded the species population for the next year as `420`:","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"7cbbb7","input":"---\n**NOTES**  \n- Lists are indexed starting from `0`. If a list has `n` elements, then the last element is at index `n - 1`.\n- Square brackets are used for two distinct purposes: for list creation: `x = [1, 2, 4]`, and list element access: `x[2]`.\n---","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"8c777a","input":"# Tutorial 4: Lists and Plotting\n## Lists\nA **list** is a Python data type that stores a sequence of values. For example, suppose we have the following data representing five years' population data for a species:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"c44cf8","input":"Any data type can be stored in a list, including strings:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"d63e9e","input":"A common pattern for list creation is to start with an empty list, then use a loop to append one element at a time. The following example creates a list of the first 10 square numbers.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"e6b8b8","input":"---\n**NOTES**\n- The Python statement `import a` causes the Python package (or module) `a` to be imported. Any function defined in `a` is then available by typing '`a.`' followed by the function name.\n- `import a as b` gives `a` an alias (nickname) `b`, so that functions are available by typing '`b.`' followed by the function name. This is useful when `a` has a long name (such as `matplotlib.pyplot`).\n- Python includes built-in modules such as `sys` (system functions) and `os` (operating system functions) which can be imported in the same way.\n- Other packages are not part of Python itself but are pre-installed as part of a Python distribution (such as Anaconda or Cocalc). In this course we will use `matplotlib` and `numpy`.\n- There are many third-party modules available, which typically need to be downloaded and installed. Examples include `biopython` (for bioinformatics) and `pandas` (for data analysis).\n---\n\nSuppose we have collected the following data which we would like to plot on a line graph.\n\n| Time (s)     | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 |\n|--------------|-----|-----|-----|-----|-----|-----|-----|\n| Distance (m) | 2.5 | 2.6 | 3.4 | 4.1 | 4.5 | 5.1 | 5.2 |\n\nFirst, we create lists to store the data for each of the x-axis and y-axis:\n","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"e9975b","input":"## Finding a List Element\nIf you want to know the index of an element in a list, use the `index` method. `string.index(s)` returns the first element equal to argument `s`:","pos":17,"type":"cell"}
{"id":0,"time":1631121564410,"type":"user"}
{"last_load":1631119675855,"type":"file"}