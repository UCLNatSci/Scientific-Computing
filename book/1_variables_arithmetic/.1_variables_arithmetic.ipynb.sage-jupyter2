{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-cbc9a5f1-5851-45ad-a6d1-d0d87150681a.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"802583","input":"8 ** 3","output":{"0":{"data":{"text/plain":"512"},"exec_count":10,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"d1f315","input":"print(\"***\")\nprint()\nprint(\"***\")","output":{"0":{"name":"stdout","output_type":"stream","text":"***\n\n***\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"048672","input":"9 / 4","output":{"0":{"data":{"text/plain":"2.25"},"exec_count":11,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"eb8289","input":"print(\"***\"","output":{"0":{"ename":"SyntaxError","evalue":"unexpected EOF while parsing (<ipython-input-11-dbc91aa2e2ab>, line 1)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-11-dbc91aa2e2ab>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print(\"***\"\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"]}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"581352","input":"9 // 4","output":{"0":{"data":{"text/plain":"2"},"exec_count":12,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"d4bbb8","input":"pop = 100\ni = 0\nwhile pop < 10000:\n    pop = pop * 1.02\n    i = i + 1\n    if i % 24 == 0:\n        print(pop)\n    \nprint(\"Number of hours:\", i)","output":{"0":{"name":"stdout","output_type":"stream","text":"160.84372494752262\n258.70703854994304\n416.1140375051517\n669.293317952817\n1076.516303420177\n1731.5089220883863\n2785.023448085657\n4479.535454562904\n7205.051685463912\nNumber of hours: 233\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"fbed81","input":"print(\"This\")\nprint(\"code\")\nprint(\"works)\nprint(\"perfectly!\")","output":{"0":{"ename":"SyntaxError","evalue":"EOL while scanning string literal (<ipython-input-13-c77efdeb2804>, line 3)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-13-c77efdeb2804>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print(\"works)\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"]}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"fda73d","input":"9 % 4","output":{"0":{"data":{"text/plain":"1"},"exec_count":13,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"dd2ab2","input":"x = 5\nprint(x % 2)\nx = 6\nprint(x % 2)","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n0\n"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"5fd52c","input":"num_pennies = 1234\npounds = num_pennies // 100\nprint(\"Pounds:\", pounds)","output":{"0":{"name":"stdout","output_type":"stream","text":"Pounds: 12\n"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"5d9d8d","input":"pence = num_pennies % 100\nprint(\"Pence:\", pence)","output":{"0":{"name":"stdout","output_type":"stream","text":"Pence: 34\n"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"42bb4b","input":"temp = 90 # temperature of water sample\n\nif temp > 100:\n    shc = 1.996\nelif temp > 0:\n    shc = 4.187\nelse:\n    shc = 2.108\n    \nprint(\"Specific heat capacity:\", shc, \"kJ/kgK\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Specific heat capacity: 4.187 kJ/kgK\n"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"f28114","input":"x = 53783\n\nif x % 2 == 0:\n    print(x, \"is even\")\nelse:\n    print(x, \"is odd\")","output":{"0":{"name":"stdout","output_type":"stream","text":"53783 is odd\n"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"4b90a0","input":"pop = 100\n\nwhile pop < 10000:\n    # double the population\n    pop = pop * 2\n    print(pop)","output":{"0":{"name":"stdout","output_type":"stream","text":"200\n400\n800\n1600\n3200\n6400\n12800\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"ecfe36","input":"pop = 100\ni = 0\nwhile pop < 10000:\n    pop = pop * 2\n    i = i + 1\n    print(pop)\n    \nprint(\"Number of hours:\", i)","output":{"0":{"name":"stdout","output_type":"stream","text":"200\n400\n800\n1600\n3200\n6400\n12800\nNumber of hours: 7\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"ee7a8f","input":"print(3 + 4)","output":{"0":{"name":"stdout","output_type":"stream","text":"7\n"}},"pos":18,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fe4133","input":"speed = 35 # assign the value 35 to a variable called speed\nprint(speed)","output":{"0":{"name":"stdout","output_type":"stream","text":"35\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"9eebb4","input":"speed = 40 # The new value replaces the old value\nprint(speed)","output":{"0":{"name":"stdout","output_type":"stream","text":"40\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"312aab","input":"print(\"Good morning :-)\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Good morning :-)\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"343d71","input":"speed = speed + 2 # Calculcate speed + 2 then assign the result to variable 'speed'\nprint(speed)","output":{"0":{"name":"stdout","output_type":"stream","text":"42\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"b951ca","input":"3 + 4 / 2","output":{"0":{"data":{"text/plain":"5.0"},"exec_count":8,"output_type":"execute_result"}},"pos":30,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"2858e5","input":"(3 + 4) / 2","output":{"0":{"data":{"text/plain":"3.5"},"exec_count":9,"output_type":"execute_result"}},"pos":32,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"a519d4","input":"print(\"3 + 4 =\", 3 + 4, \":-)\")","output":{"0":{"name":"stdout","output_type":"stream","text":"3 + 4 = 7 :-)\n"}},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"01c65c","input":"The value of `i` is initialised to zero, and then increased by 1 during each iteration of the loop. Notice that the value of `pop` is printed 7 times, whereas the Number of hours `i` is only printed once after the loop terminates since it is outside the indented block.\n\nFinally, suppose the the population growth rate is 1.02 rather than 2. If we print the population in every iteration of the loop, we're going to have an enormous list of numbers. So let's print it only once every 24 hours instead:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"051b7b","input":"### Example 2\nSuppose we have 1234 pennies in the piggy-bank. How much do we have in pounds and pence? First we divide by 100 to get the while number of pounds:","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"0fc54d","input":"## Printing\n\nThe `print` function is used to display values to the screen.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"1acfeb","input":"## Modulo Arithmetic\n\nUsing the `/` operator results in a float-point value:","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"1d1ba9","input":"This may be a simple example, but there is already some significant complexity hidden in here. We'll now cover in more detail the various language constructs used here, and introduce a few more.\n\n## Variables\n\nA **variable** is a named storage location in the computer's memory. We store a value in a variable so that we can use it later in our computations.\n\nWe use **assignment** to set the value of a variable:","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"1ed4ec","input":"The print statement can print multiple values. Separate each value by a comma:","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"437ca7","input":"## Errors\n\nPython expects code to have a very specific format. For example, every open bracket '`(`' must have a matching closing bracket '`)`'. If there is an error in the code, python will generate an **error message**.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"5d1a46","input":"## `If` statement\nThe specific heat capacity of water depends on whether it is in a solid, liquid or gaseous state.\n\n|State|Specific heat capacity (kJ/kgK)|\n|---|---|\n|Solid|2.108|\n|Liquid|4.187|\n|Gas|1.996|\n\nLet's write code which, given the temperature of a water sample, sets the value of the variable `shc` to the appropriate value (of course, we need to know the melting and boiling points of water!)","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"696357","input":"We have introduced the following line `if i % 24 == 0:`. There are two separate constructs here: an `if` statement and the `%` operator. The indented code `print(pop)` will only be executed if the condition `i % 24 == 0` is true. `i % 24` means 'remainder after dividing `i` by 24', which is only equal to zero when `i` is a multiple of 24. We'll look at this in more detail later.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"6b3685","input":"The error message tells us that the error is on `line 1` and that the type of error is `SyntaxError`.\n\nThis information can be very useful, especially in longer programs.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"77c2e6","input":"# Introduction to Python\n\n## Example\n\nWe'll start with a simple example of a Python program which simulates the growth in population of a colony of bacteria. Suppose we start with 100 cells and the population doubles every hour. How many hours will it take to reach a population of 10000 cells?","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"7e1445","input":"The `if` statement evaluates the expression `temp > 100` and if it is true, executes the indented code directly underneath, then skips to the next statement after the `if-else` block. If it is not true, execution moves to the `elif` statement. If the expression `temp > 0` is true, the indented code beneath it is executed  and execution skips to the next statement after the `if-else` block. Finally, if neither expression is true, the indent code block below the `else` statement is executed.\n\n:::{note}\n**`If` statement**\n- Exactly one of the indented code blocks will be executed.\n- Use the `tab` key to indent code by exactly four spaces.\n- The `if`, `elif` and `else` statements must be followed by a colon (`:`).\n- Note the unusual keyword `elif` (rather than `elseif`).\n- The `elif` and `else` statements are optional.\n:::\n\n:::{warning}\n**Assignment vs Equality**  \n\n`=` is the **assignment** operator. It assigns the value on the right to the variable on the left:\n```\nx = 6 + 7 # sets x to the value 13\n```\n\n`==` is the **equality** operator. It evaluates to `True` if the expression on the left is equal to the expression on the right.\n```\nx == 13 # returns `True`\n```\n\nThe condition in an `if` statement should always use `==`. This is a common mistake:\n\n```\nif x = 13: # this is a mistake. Be careful!\n    print(\"yes\")\n```\n:::","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"88eaf0","input":"Assignment is not the same as equality. We can have the same variable on both sides of the equals sign:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"8a9bda","input":"```{note}\n**VARIABLE NAMING RULES**  \n- A variable name can only contain alpha-numeric characters and underscores (`A-Z`, `a-z`, `0-9`, and `_`)\n- A variable name cannot start with a number\n- Variable names are case-sensitive (`age`, `Age` and `AGE` are three different variables)\n```\n:::{warning}\nBeware of accidentally renaming Python keywords. The following is correct Python but a Very Bad Idea because it renames the `print` function, which will result in some very weird errors!\n\n```\nprint = 5\n\nprint(print) # this won't work.\n```\n:::\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"8c827a","input":"## Python Operators\n\n| Operator | Symbol |\n|---|---|\n| Addition | `+` |\n| Subtraction | `-` |\n| Multiplication | `*` |\n| Division | `/` |\n| Power | `**` |\n| Modulo | `%` |\n| Floor division | ``//`` |","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"8c9d88","input":"### Example 1\nThe `%` operator is useful to determine if a variable is divisible by a number. For example, if a number is even its remainder after dividing by 2 is zero; if it is odd its remainder after dividing by 2 is 1:","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"8e7c46","input":"We can assign a new value to an existing variable:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"a079a1","input":"Next we use the `%` operator to find the number of pence:","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"a79423","input":"This is a legal statement because Python first evaluates the expression on the right of the equals sign (`speed + 2`) and *then* places the result into the variable on the left.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"b0e41a","input":"The error is on `line 3`. To view line numbers change to command mode (press `Esc`) then press the `l` key. Now we can see that the error is on line 3 and we can fix it by putting in the missing quote symbol `\"`.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"b66725","input":"## Number Types\n\nEvery Python variable has a **data type** as well as a value. The type determines what operations can be performed on the variable and how it is stored in the computer's memory. Python supports a number of primitive data types including numbers, strings, lists and files and in particular there are two number types: **integers** and **floating point numbers**. When we specify a number in code it is important to understand which type we are creating:\n\n|Number|Type|Description|\n|---|---|---|\n|`5`|`int`|A whole number|\n|`-5`|`int`|A negative integer|\n|`0.5`|`float`|A number with decimal part|\n|`5.0`|`float`|Including a decimal point always results in type `float`|\n|`5e6`|`float`|$5\\times10^6$|\n|`2.34e-5`|`float`|$2.34\\times10^{-5}$|","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"c174c9","input":"```\nprint(\"Good morning :-)\")\n```\ninstructs Python to display a line of text. We call the function `print` and pass it the text to be displayed.  \n\nA sequence of characters enclosed in quotation marks  \n```\n\"Good morning :-)\"\n```\nis called a **string**.\n\nThe print statement can also print numbers. The following example evaluates `3 + 4` and prints the result:","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"d47297","input":"Notice that Python inserts a space between each value.\n\nThe `print` function starts a new line after each statement. If no arguments are passed to the function, it prints a blank line. ","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"d69728","input":"To calculate the remainder after floor division, use the **modulus** operator `%`:","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"dd0389","input":"In order to compute $\\frac{3 + 4}{2}$, use brackets:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"dd8b19","input":"On the other hand, the `//` operator performs **floor division**, computing the quotient and discarding the fractional part:","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"e1f04f","input":"Let's examine each line in turn. First, we define a **variable** `pop` and set its value to 100:\n\n```\npop = 100\n```\n\nThen we define a `while` loop. A `while` loop repeats a section of code while the specified condition is true:\n\n```\nwhile pop < 10000:\n```\n\nThe code in the indented block below this line is then executed repeatedly. The line `# double the population` is a comment and is ignored by the Python interpreter. Next, multiply `pop` by 2:\n\n```\n    pop = pop * 2\n```\n\nThen `print` the value of `pop`:\n\n```\n   print(pop)\n```\n\nExecution terminates once the condition `pop < 1000` becomes false.\n\nWhen we run the code, we can see that it prints 7 values, so it must take 7 hours for the population to exceed 10000. But let's adapt the code so that it prints this number. We'll need to introduce a second variable to keep track of the number of hours:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"e9c446","input":"In order to calculate powers, use the `**` operator. For example, the following calculates the $8^3$:","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"fb70c6","input":"## Arithmetic Operators\nPython supports basic arithmetic operations addition, subtraction, multiplication and division using the symbols `+`, `-`, `*` and `/`. Brackets are used to indicate the order in which the parts of an expression are computed. For example, in the following expression, the division is performed first and then the addition.","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"fc2e6d","input":"### Example\n\nThe following example checks if the number `x` is divisible by 2, and prints an appropriate message.\n\nNote that we use the operator `==` to check for equality.","pos":51,"type":"cell"}
{"id":0,"time":1631875725296,"type":"user"}
{"last_load":1631897735043,"type":"file"}