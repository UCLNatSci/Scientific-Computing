{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-edd2335c-7805-4e5f-af26-a229bfe5649f.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"aa728b","input":"with open(\"simple_gene.fasta\") as f:\n    first_line = f.readline()\n    second_line = f.readline()","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"af293c","input":"with open(\"simple_gene.fasta\") as f:\n    whole_file = f.read()","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"9acc70","input":"with open(\"simple_gene.fasta\") as f: # Open the file and store it in file object f\n    for line in f: # Iterate over each line of text in the file\n        print(line) # line is a string variable containing one line of text","output":{"0":{"name":"stdout","output_type":"stream","text":">AB000263 |acc=AB000263|descr=Homo sapiens mRNA for prepro cortistatin like peptide, complete cds.|len=368\n\nTCAATAGTCAGCTGCACTCGAGCGACTCTGAAGGACCTGCCCCCTGTCCGACACCCCAAA\n\nGAGTCTATTGACCCGGGGACGCGAGTCCTCCGGAAGTGGGAGACGAGACCCATTTCAAGT\n\nAACCTTGTCTTTCTTTACCTAAATAGACGAGAAGCGCAACTTCTTCATGTTTTACAGTAA\n\nTTACGATACGTCTTTTAGAATCTCACAGGGTAGACAGACCTCAACTAGTTCCTTGGACAG\n\nAGGTGTTTCACACTGGTGTATAAAACGTTTAAAACGTACGACTT\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ee014e","input":"lines = []\nwith open(\"simple_gene.fasta\") as f:\n    for line in f:\n        lines.append(f)","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"9aeeb0","input":"import matplotlib.pyplot as plt\nplt.figure(figsize=(6,6))\nplt.scatter(melting_points, boiling_points) # Plot a scatter plot\nplt.xlabel(\"Melting point (K)\")\nplt.ylabel(\"Boiling point (K)\")\nplt.title(\"Melting and Boiling Points of Chemical Elements\")","output":{"0":{"data":{"text/plain":"Text(0.5, 1.0, 'Melting and Boiling Points of Chemical Elements')"},"exec_count":20,"output_type":"execute_result"},"1":{"data":{"image/png":"1ea748857e4378cb2d1636f188ad10a1c51b7b49","text/plain":"<Figure size 432x432 with 1 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":386,"width":395},"needs_background":"light"},"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"616507","input":"with open(\"simple_gene.fasta\") as f:\n    first_6_chars = f.read(6)","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ec46b0","input":"import csv # import the csv module\n\nnumbers = []\nnames = []\nmelting_points = []\nboiling_points = []\n\nwith open(\"periodic_table.csv\") as f:\n    reader = csv.reader(f) # create a reader object from the file\n    next(reader) # ignore the header row of the CSV file\n    for row in reader: # iterate over the rows, reading each into a list of strings called row\n        num = int(row[0]) # convert from string to int\n        name = row[1]\n        # Check if the 5th and 6th columns contain numeric data\n        if row[5].isnumeric() and row[6].isnumeric():\n            mp = float(row[5])\n            bp = float(row[6])\n            # Append the values to the lists\n            numbers.append(num)\n            names.append(name)\n            melting_points.append(float(mp))\n            boiling_points.append(float(bp))","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"a26067","input":"# Open the fasta file containing the DNA sequence\n\nfile_name = \"simple_gene.fasta\"\nwith open(file_name) as f:\n    sequence = \"\"\n    for line in f:\n        if line[0] != \">\":\n            sequence = sequence + line.strip()\n\nprint(sequence)","output":{"0":{"name":"stdout","output_type":"stream","text":"TCAATAGTCAGCTGCACTCGAGCGACTCTGAAGGACCTGCCCCCTGTCCGACACCCCAAAGAGTCTATTGACCCGGGGACGCGAGTCCTCCGGAAGTGGGAGACGAGACCCATTTCAAGTAACCTTGTCTTTCTTTACCTAAATAGACGAGAAGCGCAACTTCTTCATGTTTTACAGTAATTACGATACGTCTTTTAGAATCTCACAGGGTAGACAGACCTCAACTAGTTCCTTGGACAGAGGTGTTTCACACTGGTGTATAAAACGTTTAAAACGTACGACTT\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"6a4906","input":"# open a file for writing, overwriting if it already exists.\nwith open(\"numbers.txt\", \"w\") as f:\n    f.write(\"one\\n\")\n    f.write(\"two\\n\")","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"557396","input":"with open('coleridge.txt') as f_in: # open file for reading\n    with open('coleridge_new.txt', \"w\") as f_out: # open file for writing\n        i = 1\n        for line in f_in:\n            f_out.write(\"Line \" + str(i) + \": \" + line)\n            i += 1","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"033dce","input":"To read a single line, use `file.readline()`:","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2c1b66","input":"## Example: Reading a fasta file\n\nA `fasta` file is a popular text-based format for storing DNA sequence data. A sequence in `fasta` format begins with a single-line description, followed by lines of sequence data. The description line is distinguished from the sequence data by a greater-than (\">\") symbol in the first position. Typically all lines of text are shorter than 80 characters in length.  \n\nThe following code opens the fasta file and reads its contents into a string variable `sequence`. The line beginning with `>` is discarded, and newline characters are removed using `string.strip()`","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"98e1b7","input":":::{note}\nThere is no equivalent to `file.readline()` for writing. Instead, use `file.write(text + \"\\n\")` to append a newline character.\n:::\n","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"a3f85c","input":"## Writing Files\n\nTo write to a file, first open the file using one of the three write modes 'append', 'write' and 'create'. Then, use `file.write(text)` to write to the file.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"aee978","input":":::{note} \n- Python will look for the file in the **same** folder as the `ipynb` file.\n- The file object `f` is available within the indented `with` block\n- There are **two** levels of indentation - one for the `with` statement, and one for the `for` loop.\n- The `with` statement ensures that the file is properly closed once the statements within its block are executed.\n:::","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"b3d5ca","input":"# Files\n## Reading Text Files\nA text file contains data consisting of a sequence of characters, with each line terminated by a newline character. Many common files are text files, such as `.txt` files created with a text editor, Python code files, and `.fasta` files which contain DNA sequences.\n\nThe file `simple_gene.fasta` is a text file containing the following data:\n```\n>AB000263 |acc=AB000263|descr=Homo sapiens mRNA for prepro cortistatin like peptide, complete cds.|len=368\nTCAATAGTCAGCTGCACTCGAGCGACTCTGAAGGACCTGCCCCCTGTCCGACACCCCAAA\nGAGTCTATTGACCCGGGGACGCGAGTCCTCCGGAAGTGGGAGACGAGACCCATTTCAAGT\nAACCTTGTCTTTCTTTACCTAAATAGACGAGAAGCGCAACTTCTTCATGTTTTACAGTAA\nTTACGATACGTCTTTTAGAATCTCACAGGGTAGACAGACCTCAACTAGTTCCTTGGACAG\nAGGTGTTTCACACTGGTGTATAAAACGTTTAAAACGTACGACTT\n```\nThe idiomatic (and most common) way to read a text file in Python is as follows, which allows us to read the text file one line at a time. The following program opens the file `simple_gene.fasta` and then iterates over each line of text, sequentially reading each line of text into the `line` string variable.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"b9e1d2","input":"## Opening Files\n\nThe `open` function takes two parameters, `filename` and `mode`.\n\n```\nwith open(filename, mode) as f:\n...\n```\n\nThere are four different modes for opening a file: \n\n`r` - Read - Default value. Opens a file for reading, raising an error if the file does not exist.  \n`a` - Append - Opens a file for appending, creating the file if it does not exist.  \n`w` - Write - Opens a file for writing (replacing existing file contents), or creating the file if it does not exist.  \n`x` - Create - Creates the specified file, raising an error if the file exists.  \n\nAdditionally, we can choose to open the file as binary or text:\n\n`t` - Text - Default value.  \n`b` - Binary - Binary mode (e.g. images, raw data)\n\nFor example, to open a file for appending binary data:\n\n```\nopen(filename, \"ab\")\n```\n\nIn this course we will mainly be using files in text mode, which is most common in practice.\n\n## Reading Files\n\nTo open a file for reading, you can just use `open(filename)` without a `mode` argument, since read mode is the default.\n\nTo read a the entire contents of a file in to string variable, use `file.read()`:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"bd457a","input":"## CSV Files\nA CSV file (Comma Separated Values file) is a plain text file which contains tabular data. Typically a CSV file uses commas to separate columns and new lines to separate rows. The file `periodic_table.csv` (in the same folder as this `ipynb` file) contains tabular data related to the chemical elements:\n\n```\nnumber,name,symbol,appearance,atomic_number,boiling_point\n1,Hydrogen,H,colorless gas,1,20.271\n2,Helium,He,\"colorless gas, exhibiting a red-orange glow when placed in a high-voltage electric field\",2,4.222\n3,Lithium,Li,silvery-white,3,1603\n...\n```\n\nCSV files are very commonly used to store scientific data and are very useful for transferring data between different systems. It is possible to read the file using standard Python file and string processing instructions, for example using `string.split` to extract data columns. However, because CSV files are so common, Python includes a special module `csv` which includes functions to automate much of this work.\n\n:::{note}\nIf you open a `.csv` file on your computer, it might automatically open in MS Excel or other spreadsheet program. However, in fact it is not a spreadsheet file. To see the file in plain text form, open it in a text editor such as notepad (Windows) or TextEdit (Mac). If you are doing a lot of work with text files, it is recommended that you install a dedicated text processing program such as Notepad++ (Windows) or Atom (multiple platforms).\n:::\n\nThe following code reads the first, second and sixth columns into four lists:","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"c8862e","input":"Now we have four lists containing four columns from the CSV file. Let's make a scatter plot showing boiling point against melting point:","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"d233ab","input":"To read one line at a time, use a loop:","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"ef8720","input":"## Example: Editing a File\n\nFor historical and performance reasons, we do not typically edit files directly. Instead, we combine read and write operations to convert an input file into an output file. For example, suppose we would like to add line numbers to a text file `coleridge.txt`.\n\nInput:\n```\nIn Xanadu did Kubla Khan\nA stately pleasure-dome decree:\nWhere Alph, the sacred river, ran\n...\n```\n\nOutput:\n```\nLine 1: In Xanadu did Kubla Khan\nLine 2: A stately pleasure-dome decree:\nLine 3: Where Alph, the sacred river, ran\n...\n```\n\nWe open two files, one for reading and another for writing. We then loop over the rows of the input file, simultaneously writing lines to the output file.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"f2ef51","input":"Or specify the number of characters to read as an argument `file.read(n)`:","pos":9,"type":"cell"}
{"id":0,"time":1638287291869,"type":"user"}
{"last_load":1638287292966,"type":"file"}