{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-b530939d-cf00-44e7-8aa2-f3ae98c6903c.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"42b6fb","input":"","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e06915","input":"","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"1834dc","input":"first_column = x[:,0]\nprint(first_column)","output":{"0":{"name":"stdout","output_type":"stream","text":"[1 4]\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"77a28f","input":"z = np.arange(0, 1, 0.1)\nprint(z)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"f3af3f","input":"alpha = 0.2\nf = 1.5\ntime = np.arange(0, 10, 0.2) # create an array of evenly spaced time points between 0 and 10\nx = np.exp(-alpha * time) * np.sin(np.pi * f * time) # calculate the displacement x using vector operations \n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(6,3))\nplt.plot(time, x)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Displacement (m)\")","output":{"0":{"data":{"text/plain":"Text(0, 0.5, 'Displacement (m)')"},"exec_count":11,"output_type":"execute_result"},"1":{"data":{"image/png":"ef307a6a59bf2ba69e9278b4ad14c3b2bd4374d8","text/plain":"<Figure size 432x216 with 1 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":207,"width":400},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"b48243","input":"first_two_columns = x[:,:1]\nprint(first_two_columns)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[1]\n [4]]\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"8a7667","input":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# set parameter values\nr = 1\nK = 100\nn_hours = 8\ninitial_population = 1000\n\n# create array of time points\nt = np.arange(0, n_hours, 1)\n\npop = np.zeros(n_hours)\npop[0] = initial_population\n\n# run simulation\nfor i in range(n_hours - 1):\n    pop[i+1] = pop[i] + pop[i] * r\n    \nplt.plot(t, pop)","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fe06f0d70d0>]"},"exec_count":16,"output_type":"execute_result"},"1":{"data":{"image/png":"3d0c063803224744033ab7985ca71229157029c1","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":411,"width":729},"needs_background":"light"},"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"6362d5","input":"import numpy as np","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"47d298","input":"data = [5, 7, 4, 5] # create a Python list\nx = np.array(data) # create a numpy array called x containing the same values as 'data'\n\nprint(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"[5 7 4 5]\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"fcb7e1","input":"y = x[1:3] # extract elements from index 1 to 3\nprint(y)","output":{"0":{"name":"stdout","output_type":"stream","text":"[7 4]\n"}},"pos":6,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"cfd94f","input":"y = x + 10\nprint(y)","output":{"0":{"name":"stdout","output_type":"stream","text":"[15 17 14 15]\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1efc4e","input":"z = x ** 2\nprint(z)","output":{"0":{"name":"stdout","output_type":"stream","text":"[25 49 16 25]\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"245fee","input":"data = [[1, 2, 3], [4, 5, 6]]\nx = np.array(data)\n\nprint(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[1 2 3]\n [4 5 6]]\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"8a4a1a","input":"z = np.linspace(0, 1, 4)\nprint(z)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0.         0.33333333 0.66666667 1.        ]\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"422554","input":"x = np.array([[1, 2, 3],\n              [4, 5, 6]])\nprint(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[1 2 3]\n [4 5 6]]\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"f2fc00","input":"x = np.array([2, 4, 6, 8])\ny = np.array([1, 3, 5, 7])\nz = x * y # multiply two arrays element-by-element\nprint(\"x * y:\", z)","output":{"0":{"name":"stdout","output_type":"stream","text":"x * y: [ 2 12 30 56]\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"57fdbf","input":"z = x[0,1]\nprint(z)","output":{"0":{"name":"stdout","output_type":"stream","text":"2\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"5a9bb6","input":"theta = np.array([np.pi/4, np.pi/2]) # create an array with two elements\nx = np.sin(theta) # calculate the sin of the array elements\nprint(\"theta:\", theta)\nprint(\"sin(theta):\", x)","output":{"0":{"name":"stdout","output_type":"stream","text":"theta: [0.78539816 1.57079633]\nsin(theta): [0.70710678 1.        ]\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"0b7561","input":"first_row = x[0,:]\nprint(first_row)","output":{"0":{"name":"stdout","output_type":"stream","text":"[1 2 3]\n"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"8a81f3","input":"z = np.zeros(6) # Create an array of 6 zeros\nprint(z)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0. 0. 0. 0. 0. 0.]\n"}},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"003548","input":":::{admonition} Python lists VS Numpy arrays\n\n|Python list|Numpy array|\n|---|---|\n|Fixed size (no `append` method)|Variable size (use `list.append` to add an item to a list)|\n|One-dimensional|One-dimensional or multidimensional|\n|Can store multiple data types (strings, floats, ints, other lists)|Can store only numerical data of a single type|\n|Does not support vector operations|Supports vector operations|\n|Slow|Fast|\n:::","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"0587b0","input":"## Multi-Dimensional Arrays\nWe specifiy 2 dimensional arrays using a list whose elements are the rows of the array. For example, to specify the following 2-d array:\n\n$$\\left[\\begin{matrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\n\\end{matrix}\\right]$$","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"165382","input":"Note this is only possible because `x` is a numpy array. The following will not work:\n\n```\na = [1, 2, 3]\nb = a + 1 # error since a is a list\n```\nWe can also perform vector operations on two arrays. For example, to multiply two arrays element-wise:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"1ea7b4","input":"Use `np.linspace(a, b, num)` To generate an `num` evenly spaced numbers between `a` and `b`:","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"2b42e7","input":"In many ways `numpy` arrays are the same as Python lists. We can access individual items by index using square brackets `x[i]` and sub-arrays using the slice notation `x[a:b]`. Remember that we include the start index `a` but exclude the end index `b`.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"3df52d","input":"Individual array elements are accessed using the `[]` index notation, passing one index per dimension. `x[i,j]` returns the element in row `i`, column `j`:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"448c54","input":"We are already familiar with Python lists, which are used for storing sequences of data. In this lesson we will discover a second data type for storing sequences of data: the **Numpy array**. `Numpy` is a Python package designed for working with numerical data. To use it, first import the `numpy` package and give it the alias `np`:","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"5ef063","input":"See the figure below for an illustration of slicing a 2-d array.\n\n```{figure} Numpy1.jpg\n---\nname: slicing-fig\n---\nNumpy array slicing\n```\n\n## Example: Population Growth\n\nThe following equation describes the rate of growth of a population $x_i$ of hourly growth $r$.\n\n$$x_{i+1} = x_i + rx_i$$\n\nPreviously we simulated population growth using Python lists. Below is how we might do exactly the same using arrays.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"6552e5","input":"## Vector Operations\nArrays support **vector operations**. These allow us to perform operations on every item in the array simultaneously, without having to use a loop. For example, to add `10` to every element in an array:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"73c28c","input":"Supply starting and ending indexes to extract parts of an array.  Remember that in Python, we always include the start index but exclude the end index.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"7b89b0","input":"The simplest way to create a `numpy` array is from a Python list. First create a list of `integers` or `floats`, then use the function `np.array` create an array:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"7dc5c2","input":"### Array slicing\nUse a colon `:` in place of the index to extract an entire row or column from an array. This is called taking a 'slice' from the array.","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"b164a4","input":"Or to calculate the square of every element of the array:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"bc2768","input":"Use `np.arange(a, b, step)` to create an array of evenly spaced numbers ranging from `a` to `b` with step size `step`:","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"c06424","input":"`data` is a **nested list**. Each element of `data` is itself a list representing a row of the array. Note that we can make this a lot clearer by writing each row on a separate line:","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"e3176a","input":"Note that `numpy` arrays can only contain numerical data. Do not try to store a `string` in an array.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"e6b135","input":"## Numpy Functions\n\n`Numpy` also includes a number of useful mathematical functions such as `np.sin`, `np.cos` and `np.exp`. In the same way as arithmetic operators, they can be applied to arrays elementwise.\n\nThe mathematical constant $\\pi = 3.14\\ldots$ is available in numpy as `np.pi`.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"ea1ede","input":"## Creating Numpy Arrays\n\nUnlike Python lists, once a `numpy` array is created, it cannot be resized. We learnt how to create an empty list `[]` and add elements one at a time, but this method doesn't work for arrays. Instead, we must decide the size of the array upfront and create an array of the intended size. Use `np.zeros(n)` to create an array of `n` zeros:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"f1f4ee","input":"# Arrays","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"f7eeed","input":"## Example: Damped Oscillator\nThe following equation describes the motion of a damped linear oscillator, where $t$ is time and $x$ is displacement.\n\n$$x(t) = e^{-\\alpha t}\\sin\\left(\\pi f t\\right)$$\n\nWe will plot the trajectory of the oscillator, given $\\alpha=0.2$ and $f=1.5$.","pos":23,"type":"cell"}
{"id":0,"time":1636825850418,"type":"user"}
{"last_load":1637017206969,"type":"file"}